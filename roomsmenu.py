# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'rooms.ui'
#
# Created by: PyQt5 UI code generator 5.15.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5.QtWidgets import QWidget, QSizePolicy, QSpacerItem, QLabel
from PyQt5.QtWidgets import QHBoxLayout, QVBoxLayout, QFrame, QLayout
from PyQt5.QtWidgets import QComboBox, QScrollArea
from PyQt5.QtCore import QSize, QRect, Qt, QTimer
import logging

import home
import connection



class RoomsMenu(QWidget):
    def __init__(self, mqtt):
        super().__init__()

        self.rooms = [home.Room("All"), home.Room("New")]

        self.logger = logging.getLogger("ROOMSMENU")

        # Подключаемся к помошнику с дополнительными функциями для mqtt
        self.mqtt_helper = connection.MqttHelper(mqtt)

        self.setObjectName("RoomsWidget")

        sizePolicy = QSizePolicy(QSizePolicy.Preferred, QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.sizePolicy().hasHeightForWidth())
        self.setSizePolicy(sizePolicy)

        self.setStyleSheet("QLabel{\n"
                            "    font-size: 16px;\n"
                            "}\n"
                            "QLabel#mainLabel{\n"
                            "    font-size: 25px;\n"
                            "}\n"
                            "QComboBox{\n"
                            "    font-size: 20px\n"
                            "}\n"
                            "QLineEdit{\n"
                            "    font-size: 20px;\n"
                            "}\n"
                            "QPushButton{\n"
                            "    width: 70px;\n"
                            "    height: 70px;\n"
                            "    margin-right: 5px;\n"
                            "}\n"
                            "QFrame#clientFrame{\n"
                            "    border: 1px solid;\n"
                            "}")
        spacerItem = QSpacerItem(40, 20, QSizePolicy.Expanding, QSizePolicy.Minimum)

        # Название окна
        mainLabel = QLabel(self)
        mainLabel.setFrameShape(QFrame.NoFrame)
        mainLabel.setScaledContents(False)
        mainLabel.setObjectName("mainLabel")
        mainLabel.setText("Rooms")

        spacerItem1 = QSpacerItem(40, 20, QSizePolicy.Expanding, QSizePolicy.Minimum)

        # Пространство для объекта название окна
        labelHLay = QHBoxLayout()
        labelHLay.setSizeConstraint(QLayout.SetMinimumSize)
        labelHLay.setObjectName("labelHLay")
        labelHLay.addItem(spacerItem)
        labelHLay.addWidget(mainLabel)
        labelHLay.addItem(spacerItem1)

        # Прямая разделяющая заголовок окна и меню комнат
        line = QFrame(self)
        line.setLineWidth(1)
        line.setFrameShape(QFrame.HLine)
        line.setFrameShadow(QFrame.Sunken)
        line.setObjectName("line")

        # Список комнат с возможностью выбора комнаты
        self.RoomsBox = QComboBox(self)
        self.RoomsBox.setEnabled(True)
        sizePolicy = QSizePolicy(QSizePolicy.Preferred, QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.RoomsBox.sizePolicy().hasHeightForWidth())
        self.RoomsBox.setSizePolicy(sizePolicy)
        self.RoomsBox.setMaximumSize(QSize(200, 100))
        self.RoomsBox.setObjectName("RoomsBox")
        for room in self.rooms:
            self.RoomsBox.addItem(room.get_name())

        # Простаранство для объекта выбора комнат
        RoomsLayout = QHBoxLayout()
        RoomsLayout.setObjectName("RoomsLayout")
        RoomsLayout.addWidget(self.RoomsBox)

        spacerItem2 = QSpacerItem(20, 40, QSizePolicy.Minimum, QSizePolicy.Expanding)

        # Пространство клиентов и возможностью прокрутки
        self.scrollAreaWidgetContents_2 = QWidget()
        self.scrollAreaWidgetContents_2.setGeometry(QRect(0, 0, 764, 691))
        self.scrollAreaWidgetContents_2.setObjectName("scrollAreaWidgetContents_2")
        self.verticalLayout_6 = QVBoxLayout(self.scrollAreaWidgetContents_2)
        self.verticalLayout_6.setObjectName("verticalLayout_6")
        self.verticalLayout_6.addItem(spacerItem2)

        self.RoomScrollArea = QScrollArea(self)
        sizePolicy = QSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.RoomScrollArea.sizePolicy().hasHeightForWidth())
        self.RoomScrollArea.setSizePolicy(sizePolicy)
        self.RoomScrollArea.setMinimumSize(QSize(0, 100))
        self.RoomScrollArea.setMouseTracking(True)
        self.RoomScrollArea.setVerticalScrollBarPolicy(Qt.ScrollBarAlwaysOn)
        self.RoomScrollArea.setWidgetResizable(True)
        self.RoomScrollArea.setObjectName("RoomScrollArea")
        self.RoomScrollArea.setWidget(self.scrollAreaWidgetContents_2)

        # Основоное простанство для всех остальных простанств
        self.mainVLay = QVBoxLayout()
        self.mainVLay.setSizeConstraint(QLayout.SetMaximumSize)
        self.mainVLay.setObjectName("mainVLay")
        self.mainVLay.addLayout(labelHLay)
        self.mainVLay.addWidget(line)
        self.mainVLay.addLayout(RoomsLayout)
        self.mainVLay.addWidget(self.RoomScrollArea)

        self.setLayout(self.mainVLay)
        
        self.show()

        timer = QTimer(self)
        timer.setInterval(5000)
        timer.setSingleShot(False)
        timer.timeout.connect(self.update_rooms)
        timer.start(5000)


    
    
    def delete_room(self, room): # Удалить комнату по имени
        try:
            self.RoomsBox.removeItem(self.rooms.index(room))
            self.rooms.remove(room)
            self.logger.info("Room [" + room.get_name() + "] was deleted")
        except ValueError:
            self.logger.warning(room.get_name() + " is missing from the list of rooms")
    
    def add_room(self, room): # Добавить комнату
        self.rooms.append(room)
        self.logging.info("Room [" + room.get_name() + "] was added")

    def update_rooms(self): # Поиска новых клиентов
        self.clients = self.mqtt_helper.get_devices()
        self.rooms[0].add_clients(self.clients)
        self.rooms[1].add_clients(self.clients)
        
